// Generated by SolidPython 0.4.7 on 2020-04-10 19:30:12


difference(){
	difference() {
		union() {
			translate(v = [0, 0, 15]) {
				linear_extrude(height = 20, scale = 1.2300000000) {
					circle(d = 80);
				}
			}
			scale(v = 1.0500000000) {
				translate(v = [0, 0, 50]) {
					difference() {
						sphere(r = 50);
						translate(v = [0, 0, 65]) {
							cube(center = true, size = 100);
						}
					}
				}
			}
			difference() {
				linear_extrude(height = 15) {
					square(center = true, size = 80);
				}
			}
		}
	}
	/* Holes Below*/
	union(){
		union(){
			translate(v = [0, 0, 55]) {
				sphere(r = 50);
			}
			union(){
				linear_extrude(height = 45) {
					square(center = true, size = 47);
				}
			}
		}
		union() {
			rotate(a = 0, v = [0, 0, 1]) {
				translate(v = [0, 0, 21]) {
					translate(v = [-250.0000000000, 0, 0]) {
						rotate(a = 90, v = [1, 0, 0]) {
							translate(v = [0, 0, -1.5000000000]) {
								linear_extrude(height = 3) {
									square(size = 500);
								}
							}
						}
					}
				}
			}
			rotate(a = 72, v = [0, 0, 1]) {
				translate(v = [0, 0, 21]) {
					translate(v = [-250.0000000000, 0, 0]) {
						rotate(a = 90, v = [1, 0, 0]) {
							translate(v = [0, 0, -1.5000000000]) {
								linear_extrude(height = 3) {
									square(size = 500);
								}
							}
						}
					}
				}
			}
			rotate(a = 144, v = [0, 0, 1]) {
				translate(v = [0, 0, 21]) {
					translate(v = [-250.0000000000, 0, 0]) {
						rotate(a = 90, v = [1, 0, 0]) {
							translate(v = [0, 0, -1.5000000000]) {
								linear_extrude(height = 3) {
									square(size = 500);
								}
							}
						}
					}
				}
			}
			rotate(a = 216, v = [0, 0, 1]) {
				translate(v = [0, 0, 21]) {
					translate(v = [-250.0000000000, 0, 0]) {
						rotate(a = 90, v = [1, 0, 0]) {
							translate(v = [0, 0, -1.5000000000]) {
								linear_extrude(height = 3) {
									square(size = 500);
								}
							}
						}
					}
				}
			}
			rotate(a = 288, v = [0, 0, 1]) {
				translate(v = [0, 0, 21]) {
					translate(v = [-250.0000000000, 0, 0]) {
						rotate(a = 90, v = [1, 0, 0]) {
							translate(v = [0, 0, -1.5000000000]) {
								linear_extrude(height = 3) {
									square(size = 500);
								}
							}
						}
					}
				}
			}
		}
	} /* End Holes */ 
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
from .lib.grinder_base import GrinderBase
from .lib.dell_connector import DellConnector
from .lib.holder.round_holder import RoundHolder

from solid import *
from solid.utils import *  # Not required, but the utils module is useful





#connector = DellConnector(x_holders=4, y_holders=2)

#scad = connector.rotate_to_print(connector.multiple_dell_holder())
#scad = connector.multiple_dell_holder()



#top = GrinderBase.custom_diameter(90, 17).platform()
#scad_render_to_file(top, "coffee-grinder_base.scad")


base = GrinderBase().platform()
scad_render_to_file(base, "coffee-grinder_base.scad")


round_holder = RoundHolder().completeHolder()
scad_render_to_file(round_holder, "coffee-round-holder.scad")

connector = linear_extrude(height=30)(square(47, center=True)-square(40, center=True))
scad_render_to_file(connector, "coffee-connector.scad")
 
 
************************************************/
